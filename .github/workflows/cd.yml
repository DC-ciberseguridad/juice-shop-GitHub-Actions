name: "Flujo CD"
run-name: "Flujo CD"
on:
  workflow_dispatch:
    inputs:
      cloud:
        description: "Proveedor Cloud"
        required: true
        default: "AWS"
        options: ["AWS", "GCP", "Azure"]
jobs:
  aws:
    runs-on: ubuntu-latest
    if: github.event.inputs.cloud == 'AWS'
    steps:
      - name: "Configurar credenciales de AWS"
        uses: aws-actions/configure-aws-credentials@e1e17a757e536f70e52b5a12b2e8d1d1c60e04ef #v2 #v2.0.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Revisar si el servicio existe
        id: revisar_servicio
        run: |
          status=$(aws apprunner describe-service \
            --service-arn <SERVICE_ARN>\
            --query "Service.Status"\
            --output text || true)
          if [ "$status" == "RUNNING" ]; then
            echo "::set-output name=servicio_existe::true"
          else
            echo "::set-output name=servicio_existe::false"
          fi
      - name: Desplegar en AWS App Runner
        if: steps.revisar_servicio.outputs.servicio_existe == 'false'
        run: |
          aws apprunner create-service \
            --service-name my-app \
            --source-configuration imageRepository={repositoryUrl=${{ AWS_REGISTRY }}/${{ vars.AWS_REGISTRY_ALIAS }}/${{ vars.AWS_REPOSITORY }},imageIdentifier=${{ github.sha }}},imageRepositoryType=ECR \
            --region ${{ vars.AWS_REGION }}
      - name: Actualizar app en AWS App Runner
        if: steps.revisar_servicio.outputs.servicio_existe == 'true'
        run: |
          aws apprunner update-service \
            --service-name my-app \
            --source-configuration imageRepository={repositoryUrl=${{ AWS_REGISTRY }}/${{ vars.AWS_REGISTRY_ALIAS }}/${{ vars.AWS_REPOSITORY }},imageIdentifier=${{ github.sha }}},imageRepositoryType=ECR \
            --region ${{ vars.AWS_REGION }}

  gcp:
    runs-on: ubuntu-latest
    if: github.event.inputs.cloud == 'GCP'
    env:
      PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      SERVICE_NAME: ${{ vars.GCP_SERVICE_NAME }}
      REGION: ${{ vars.GCP_REGION }}
    steps:
      - name: "Autenticar en GCP"
        uses: google-github-actions/setup-gcloud@62d4898025f6041e16b1068643bfc5a696863587 #v1.1.0
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
      - name: "Desplegar en Cloud Run"
        uses: google-github-actions/deploy-cloudrun@9c01af28be5da14b228ba369b7700d22830b35b7 #v1.0.1
        with:
          image: gcr.io/$PROJECT_ID/$SERVICE_NAME:latest
          region: ${{ env.REGION }}
          service: ${{ env.SERVICE_NAME }}S

  azure:
    runs-on: ubuntu-latest
    if: github.event.inputs.cloud == 'Azure'
    steps:
      - name: "Autenticar en Azure"
        uses: azure/login@92a5484dfaf04ca78a94597f4f19fea633851fa2 #v1 #v1.4.6
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: "Crear Azure Container Instance"
        uses: azure/container-instances@v1
        with:
          resource-group: ${{ vars.AZURE_RESOURCE_NAME }}
          name: ${{ VARS.AZURE_CONTAINER_INSTANCE_NAME}}
          image: ${{ vars.AZURE_REGISTRY_NAME }}/${{ vars.AZURE_IMAGE_NAME }}:latest
          cpu: 1
          memory: 1.5
          ports: 80
